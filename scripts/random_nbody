-- This generates a random system of bodies that are gravitationally 
-- attracted to one another.

-- Options.
N = tonumber(options.N) or 10                    -- Number of bodies
L = tonumber(options.L) or 10                    -- Length on a side of a cubic bounding box
seed = tonumber(options.seed) or 123456          -- Random number generator seed
dt = tonumber(options.fixed_dt) or 1e-2          -- Fixed timestep
G = tonumber(options.G) or constants.G           -- Gravitational constant
m_min = tonumber(options.m_min) or 1             -- Minimum mass
m_max = tonumber(options.max_mass) or 100        -- Maximum mass
v_max = tonumber(options.max_mass) or 100        -- Maximum velocity
t2 = tonumber(options.T) or 1                    -- Final time
max_steps = tonumber(options.max_steps) or 1000  -- Maximum number of steps
algo = options.algorithm or 'barnes_hut'         -- Algorithm ('barnes_hut' or 'brute_force')
plot_every = tonumber(options.plot_every) or 0.1 -- Plot interval
save_every = tonumber(options.save_every)        -- Save interval
load_step = tonumber(options.load_step)          -- Step to load from

-- First and foremost, we need a random number generator.
gen = rng.host()
gen:set_seed(seed)

-- Set up a bounding box.
box = bbox.new{x1 = 0, x2 = L, 
               y1 = 0, y2 = L,
               z1 = 0, z2 = L}

-- Generate N bodies with random masses, positions, velocities.
bodies = {}
if not load_step then
  t1 = 0
  for i = 1,N do
    bodies[i] = body.new{name = string.format('body_%d', i),
                         m = math.max(m_min, m_max * gen:uniform()),
                         x = point.random(gen, box),
                         v = vector.random(gen, v_max * gen:uniform())}
  end
  print(string.format('Generated %d bodies in %s.', N, box))
end

-- Create our model.
if algo == 'brute_force' then
  nb = nbody.brute_force{G = G, bodies = bodies}
elseif algo == 'barnes_hut' then
  nb = nbody.barnes_hut{G = G, theta = 0.5, bodies = bodies}
else
  error(string.format('Invalid algorithm: %s', algo))
end

-- If we're running a smallish simulation (N <= 100), wire up some probes and 
-- set acquisition times.
if N < 100 and not load_step then
  times = {}
  for i = 0,T/20 do
    times[i+1] = i*T/20
  end
  for i = 1,N do
    px = nbody.x_probe(bodies[i].name)
    nb:add_probe(px, times)
    pv = nbody.v_probe(bodies[i].name)
    nb:add_probe(pv, times)
  end
  pE = nbody.E_probe()
  nb:add_probe(pE, times)
end

-- Run the thing.
print('Running...')
nb:run{t1 = t1, 
       t2 = t2,
       max_steps = max_steps,
       max_dt = dt,
       directory = 'random_nbody',
       plot_every = plot_every,
       save_every = save_every,
       load_step = load_step}
print('Finished.')

-- Extract data and write to a file.
function write_array(file, name, array)
  file:write(string.format('%s = [ ', name))
  for i=1,#array do
    file:write(string.format('%f, ', array[i]))
  end
  file:write(']\n')
end

function write_vector_arrays(file, name, array)
  file:write(string.format('%s_x = [ ', name))
  for i=1,#array do
    file:write(string.format('%f, ', array[i][1]))
  end
  file:write(']\n')

  file:write(string.format('%s_y = [ ', name))
  for i=1,#array do
    file:write(string.format('%f, ', array[i][2]))
  end
  file:write(']\n')

  file:write(string.format('%s_z = [ ', name))
  for i=1,#array do
    file:write(string.format('%f, ', array[i][3]))
  end
  file:write(']\n')
end

if (N <= 100 and not load_step) then
  data = nb:data()
  f = io.open('random_nbody.py', 'w')
  write_array(f, 't', times)
  for i = 1,N do
    x_name = string.format('x_body_%d', i)
    write_vector_arrays(f, x_name, data[x_name].values)
    v_name = string.format('v_body_%d', i)
    write_vector_arrays(f, v_name, data[v_name].values)
  end
  write_array(f, 'E', data['E'].values)
  f:close()
end
